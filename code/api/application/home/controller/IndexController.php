<?php

namespace app\home\controller;

use app\common\controller\BaseController;
use app\common\exception\CommonException;
use app\common\helper\PageHelper;
use app\common\model\Project;
use app\common\model\ProjectVersion;
use app\common\model\User;
use Hashids\Hashids;
use Mimey\MimeTypes;
use think\Db;
use think\facade\Session;
use think\Request;

class IndexController extends BaseController
{
    private $hashids;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->hashids = new Hashids('bad man', 12);
    }

    /**
     * 上传项目
     * @param Request $request
     * @throws CommonException
     * @author 我只想看看蓝天
     */
    public function uploadProject(Request $request)
    {
        $filed = ['project_id'];
        $param = \request()->only($filed);
        checkData($param, [
            'project_id|项目id' => 'require|integer'
        ]);
        if (!($project = Project::find($param['project_id']))) {
            throw new CommonException('项目不存在');
        }
        if (!User::isSuperAdmin()) {
            if ($project['uid'] != is_login()) {
                throw new CommonException('项目无权限');
            }
        }

        $file = $request->file('file');
        if (!$file) {
            throw new CommonException('请选择上传的文件');
        }

        $info = $file->validate([
            'size' => 1024 * 1024 * 1024, //1024M
            'ext' => 'zip'
        ])->check();
        if (!$info) {
            throw new CommonException($file->getError());
        }


        $path = '/backend/uploads/' . date('Ymd') . '/' . uniqid();
        $dir = app()->getRootPath() . 'public' . $path;
        $fixed_path = '/backend/fixed/' . $param['project_id'] . '/' . md5($param['project_id'] . 'hello_project');
        $fixed_dir = app()->getRootPath() . 'public' . $fixed_path;
        if (!is_dir($dir)) {
            mkdir($dir, 0755, true);
        }
        if (!is_dir($fixed_dir)) {
            mkdir($fixed_dir, 0755, true);
        }

        $zip_file = $file->getPathname();
        $zip = new \ZipArchive;
        if ($zip->open($zip_file) === TRUE) {
            //保存源文件
            $zip_file_path = $dir . '/' . uniqid() . '.zip';
            copy($zip_file, $zip_file_path);

            $data = [];
            $data['uid'] = is_login();
            $data['zip_file_url'] = strstr($zip_file_path, '/backend/');
            $data['url'] = '';
            $data['path'] = $dir;
            $data['file_name'] = '压缩包文件数量超过1000，文件解压未完成，已放到后台处理，请稍等10分钟，10分钟未处理完，证明该文件存在问题导致异常失效，需重新上传...';
            $data['project_id'] = $param['project_id'];
            $projectVersion = ProjectVersion::create($data);
            if (empty($projectVersion->id)) {
                throw new CommonException('数据库操作出错');
            }

            $docnum = $zip->numFiles;
            if ($docnum > 1000) { //防止处理超时
                $return = [
                    'message' => '提交成功',
                    'code' => 200,
                    'info' => $info
                ];
                http_response_code($return['code']);
                header('Content-Type:application/json; charset=utf-8');
                echo json_encode($return, 256);
                fastcgi_finish_request();
                //允许执行10分钟
                set_time_limit(60 * 10);
            }

            try {
                for ($i = 0; $i < $docnum; $i++) {
                    $statInfo = $zip->statIndex($i, \ZipArchive::FL_ENC_RAW);
                    $filename = transcoding($statInfo['name']);
                    $targetPath = $dir . '/' . $filename;
                    if ($statInfo['crc'] == 0) {
                        //新建目录
                        if (!is_dir($targetPath)) {
                            mkdir($targetPath, 0755, true);
                        }
                    } else {
                        //确保父目录存在
                        $parentDir = dirname($targetPath);
                        if (!is_dir($parentDir)) {
                            mkdir($parentDir, 0775, true);
                        }
                        //拷贝文件
                        copy('zip://' . $zip_file . '#' . $zip->getNameIndex($i), $targetPath);
                    }
                }
                $zip->close();

                $all_files = getAllFiles($dir);
                //检查，不允许上传可执行脚本文件
                foreach ($all_files as $one_file_path) {
                    $ext = pathinfo($one_file_path, PATHINFO_EXTENSION);
                    if (in_array(strtolower($ext), ['php'])) {
                        unlink($one_file_path);
                    }
                }
                $res = getFirstExistFile($all_files);
                if (empty($res)) {
                    throw new CommonException('zip文件缺少项目启动文件index.html');
                }
                $skipFilenameDir = ProjectVersion::getSkipFilenameDir($dir);
                copydir($skipFilenameDir, $fixed_dir);
                $data = [];
                $data['id'] = $projectVersion->id;
                $data['url'] = strstr($res, '/backend/');
                $data['file_name'] = $file->getInfo()['name'];
                Db::startTrans();
                ProjectVersion::update($data);
                $project->fixed_link = $fixed_path . str_replace($skipFilenameDir, '', $res);
                $project->save();
                Db::commit();
                if ($docnum <= 1000) {
                    return $this->successResponse('提交成功');
                }
            } catch (\Exception $e) {
                deletedir($dir);
                ProjectVersion::where('id', $projectVersion->id)->delete();
                throw new CommonException($e->getMessage());
            }
        } else {
            throw new CommonException('文件解压失败');
        }
    }

    /**
     * 获取项目历史版本
     * @return \think\response\Json|\think\response\Jsonp
     * @throws CommonException
     * @author 我只想看看蓝天
     */
    public function getProjectVersionList()
    {
        $filed = ['project_id', 'search'];
        $param = \request()->only($filed);
        checkData($param, [
            'project_id|项目id' => 'require|integer'
        ]);
        $where[] = ['a.project_id', '=', $param['project_id']];
        if (!User::isSuperAdmin()) {
            if (Project::where('id', $param['project_id'])->value('uid') != is_login()) {
                throw new CommonException('项目无权限');
            }
        }
        if (!empty($param['search'])) {
            $where[] = ['a.file_name', 'like', "%{$param['search']}%"];
        }
        $res = (new PageHelper(new ProjectVersion()))
            ->alias('a')
            ->join('user b', 'a.uid=b.id', 'left')
            ->join('project c', 'a.project_id=c.id', 'left')
            ->where($where)
            ->order('a.id', 'desc')
            ->autoPage()
            ->field('a.id,a.url,c.title,a.file_name,b.appid,a.create_time')
            ->get();
        foreach ($res['list'] as &$item) {
            $id = $this->hashids->encode($item['id'], 1);
            $item['url'] = \request()->domain() . '/api/show/' . $id . '/index.html';
            $item['zip_file_url'] = '/api/downloadZipFile?id=' . $id;
        }
        return $this->successResponse('获取成功', $res);
    }

    /**
     * 下载上传文件
     * @return \think\response\Download|void
     * @author 我只想看看蓝天
     */
    public function downloadZipFile()
    {
        $id = \request()->param('id');
        if (empty($id)) {
            exit('文件不存在');
        }
        $id = $this->hashids->decode($id);
        $id = $id[0] ?? '';
        $projectVersion = ProjectVersion::where('id', $id)->find();
        $zip_file_url = $projectVersion['zip_file_url'] ?? '';
        if (empty($zip_file_url)) {
            exit('文件不存在');
        }
        $file_path = app()->getRootPath() . 'public' . $zip_file_url;
        return download($file_path, $projectVersion['file_name']);
    }

    /**
     * 获取项目列表
     * @param Request $request
     * @return \think\response\Json|\think\response\Jsonp
     * @author 我只想看看蓝天
     */
    public function getH5List(Request $request)
    {
        $fields = ['search'];
        $param = $request->only($fields);
        $where = [];
        if (!empty($param['search'])) {
            $where[] = ['a.title|a.desc|b.appid', 'like', "%{$param['search']}%"];
        }
        if (!User::isSuperAdmin()) {
            $where[] = ['a.uid', '=', is_login()];
        }
        $res = (new PageHelper(new Project()))
            ->alias('a')
            ->join('user b', 'a.uid=b.id', 'left')
            ->where($where)
            ->order('a.id', 'desc')
            ->autoPage()
            ->field('a.id,a.title,a.desc,a.auth_code,b.appid,a.create_time')
            ->get();

        return $this->successResponse('获取成功', $res);
    }

    /**
     * 添加项目
     * @param Request $request
     * @return \think\response\Json|\think\response\Jsonp
     * @author 我只想看看蓝天
     */
    public function addH5List(Request $request)
    {
        $fields = ['title', 'desc', 'auth_code'];
        $param = $request->only($fields);
        checkData($param, [
            'title|项目名称' => 'require',
            'desc|项目简介' => 'max:1024',
            'auth_code|授权码' => 'max:50',
        ]);

        if (Project::where('title', $param['title'])
            ->where('uid', '=', is_login())
            ->count()) {
            throw new CommonException('已存在同名项目');
        }

        $param['uid'] = is_login();
        Project::create($param);
        return $this->successResponse('添加成功');
    }

    /**
     * 删除项目版本
     * @param Request $request
     * @return \think\response\Json|\think\response\Jsonp
     * @throws CommonException
     * @throws \think\Exception
     * @throws \think\exception\PDOException
     * @author 我只想看看蓝天
     */
    public function delProjectVersion(Request $request)
    {
        $fields = ['project_version_id'];
        $param = $request->only($fields);
        checkData($param, [
            'project_version_id|项目版本id' => 'require|integer',
        ]);

        $project_version = ProjectVersion::find($param['project_version_id']);
        if (empty($project_version)) {
            throw new CommonException('项目版本不存在');
        }
        $where = [];
        $where[] = ['id', '=', $param['project_version_id']];
        if (!User::isSuperAdmin() && $project_version['uid'] != is_login()) {
            throw new CommonException('项目版本无权限');
        }
        ProjectVersion::where($where)->delete();
        ProjectVersion::delNotUseDir();
        return $this->successResponse('删除成功');
    }

    /**
     * 删除项目
     * @param Request $request
     * @return \think\response\Json|\think\response\Jsonp
     * @throws CommonException
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     * @author 我只想看看蓝天
     */
    public function delProject(Request $request)
    {
        $fields = ['project_id'];
        $param = $request->only($fields);
        checkData($param, [
            'project_id|项目id' => 'require|integer',
        ]);

        $project = Project::find($param['project_id']);
        if (empty($project)) {
            throw new CommonException('项目不存在');
        }
        $where = [];
        $where[] = ['id', '=', $param['project_id']];
        if (!User::isSuperAdmin() && $project['uid'] != is_login()) {
            throw new CommonException('项目无权限');
        }

        ProjectVersion::where('project_id', $param['project_id'])->delete();
        Project::where($where)->delete();

        ProjectVersion::delNotUseDir();

        return $this->successResponse('删除成功');
    }

    /**
     * 获取固定访问链接
     * @param Request $request
     * @return \think\response\Json|\think\response\Jsonp
     * @author 我只想看看蓝天
     */
    public function getFixedLink(Request $request)
    {
        $fields = ['project_id'];
        $param = $request->only($fields);
        checkData($param, [
            'project_id|项目id' => 'require|integer',
        ]);

        $project_fixed_link = Project::where('id', $param['project_id'])->value('fixed_link');
        if (empty($project_fixed_link)) {
            $project_fixed_link = '';
        } else {
            $project_fixed_link = \request()->domain() . '/api/show/' . $this->hashids->encode($param['project_id'], 2) . '/index.html';
        }
        return $this->successResponse('获取成功', ['fixed_link' => $project_fixed_link]);
    }

    /**
     * 编辑项目
     * @param Request $request
     * @return \think\response\Json|\think\response\Jsonp
     * @throws CommonException
     * @author 我只想看看蓝天
     */
    public function editH5List(Request $request)
    {
        $fields = ['id', 'title', 'desc', 'auth_code'];
        $param = $request->only($fields);
        checkData($param, [
            'id|项目id' => 'require|integer',
            'title|项目名称' => 'require',
            'desc|项目简介' => 'max:1024',
            'auth_code|授权码' => 'max:50',
        ]);

        $param['auth_code'] = $param['auth_code'] ?? '';
        $project = Project::find($param['id']);
        if (empty($project)) {
            throw new CommonException('项目不存在');
        }
        if (Project::where('title', $param['title'])
            ->where('id', '<>', $param['id'])
            ->where('uid', '=', is_login())
            ->count()) {
            throw new CommonException('已存在同名项目');
        }

        if (!User::isSuperAdmin() && $project['uid'] != is_login()) {
            throw new CommonException('项目无权限');
        }

        Project::update($param);
        return $this->successResponse('编辑成功');
    }

    /**
     * 获取用户列表
     * @param Request $request
     * @return \think\response\Json|\think\response\Jsonp
     * @throws CommonException
     * @author 我只想看看蓝天
     */
    public function getUserList(Request $request)
    {
        $fields = ['search'];
        $param = $request->only($fields);
        $where = [];
        if (!empty($param['search'])) {
            $where[] = ['appid', 'like', "%{$param['search']}%"];
        }
        if (!User::isSuperAdmin()) {
            throw new CommonException('无权访问');
        }
        $res = (new PageHelper(new User()))
            ->where($where)
            ->order('id', 'desc')
            ->autoPage()
            ->field('id,appid,is_super_admin,creator_appid,is_use,create_time')
            ->get();
        foreach ($res['list'] as $value) {
            $value['creator_appid'] = empty($value['creator_appid']) ? '-' : $value['creator_appid'];
        }

        return $this->successResponse('获取成功', $res);
    }

    /**
     * 添加用户
     * @param Request $request
     * @return \think\response\Json|\think\response\Jsonp
     * @throws CommonException
     * @author 我只想看看蓝天
     */
    public function addUser(Request $request)
    {
        $fields = ['appid', 'appsecret', 'is_super_admin'];
        $param = $request->only($fields);
        checkData($param, [
            'appid|appid' => 'require|unique:user',
            'appsecret|appsecret' => 'require|min:6',
            'is_super_admin|用户类型' => 'require|in:0,1',
        ]);

        if (!User::isSuperAdmin()) {
            throw new CommonException('无权访问');
        }

        $param['creator_appid'] = User::where('id', is_login())->value('appid');
        User::create($param);
        return $this->successResponse('添加成功');
    }

    /**
     * 编辑用户
     * @param Request $request
     * @return \think\response\Json|\think\response\Jsonp
     * @throws CommonException
     * @author 我只想看看蓝天
     */
    public function editUser(Request $request)
    {
        $fields = ['appsecret', 'is_super_admin', 'is_use', 'id'];
        $param = $request->only($fields);
        checkData($param, [
            'id|用户id' => 'require|integer',
            'appsecret|appsecret' => 'min:6',
            'is_super_admin|用户类型' => 'in:0,1',
            'is_use|状态' => 'in:0,1',
        ]);

        if (!User::isSuperAdmin()) {
            throw new CommonException('无权访问');
        }

        if (User::where('id', $param['id'])->value('appid') === 'admin') {
            unset($param['is_super_admin']);
            unset($param['is_use']);
            if ($param['id'] !== is_login()) {
                unset($param['appsecret']);
            }
        }

        User::update($param);
        return $this->successResponse('编辑成功');
    }

    /**
     * 项目资源统一展示页面
     * @author 我只想看看蓝天
     */
    public function show()
    {
        $url = \request()->url();
        preg_match('/api\/show\/(\w+)(.*)?/i', $url, $match);
        $raw_id = $match[1] ?? '';
        //检查授权码
        $url = $this->checkCode($raw_id);
        if (!empty($match[2])) {
            $url = str_ireplace('/index.html', $match[2], $url);
        }
        $file_path = app()->getRootPath() . 'public' . $url;
        $file_path = preg_replace('/\?.*/', '', $file_path);
        $this->showfile($file_path);
    }

    private function showfile($file_path)
    {
        $mime = new MimeTypes();
        $mime_content_type = $mime->getMimeType(pathinfo($file_path)['extension'] ?? '');
        header('Content-Type: ' . $mime_content_type);
        browserCacheControl(60 * 60 * 24 * 30);
        exit(file_get_contents($file_path));
    }

    private function checkCode($raw_id)
    {
        $auth_url = Session::get('auth_url_' . $raw_id);
        if (!empty($auth_url)) {
            return $auth_url;
        }
        //不存在缓存则需要授权
        $decode_data = $this->hashids->decode($raw_id);
        $id = $decode_data[0] ?? 0;
        $type = $decode_data[1] ?? 1;
        if ($type == 1) {
            $project = ProjectVersion::alias('a')
                ->join('project b', 'a.project_id=b.id')
                ->where('a.id', $id)
                ->field('a.*,b.auth_code,b.title')
                ->find();
            $url = $project['url'] ?? '';
        } else {
            $project = Project::where('id', $id)->find();
            $url = $project['fixed_link'] ?? '';
        }

        if (empty($project)) {
            exit('页面不存在');
        }
        //验证授权码界面、接口
        $method = \request()->method();
        $show_tip = '';
        $code = '';
        if ($method == 'POST') {
            $code = \request()->param('auth_code');
            if ($code != $project['auth_code']) {
                $show_tip = '授权码无效，请重新输入';
            } else {
                Session::set('auth_url_' . $raw_id, $url);
                return $url;
            }
        } else {
            if (empty($project['auth_code'])) {
                Session::set('auth_url_' . $raw_id, $url);
                return $url;
            }
        }
        $data = <<<info
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>授权码</title>
    <link type="text/css" rel="stylesheet" href="/backend/bootstrap-3.4.1/css/bootstrap.css">
    <script src="/backend/bootstrap-3.4.1/js/bootstrap.js"></script>
</head>
<body>
<div style="text-align: center;width: 100%;height: 100%">
<div style="width: 400px;height: 300px;position:absolute;top: 50%;margin-top: -150px;left: 50%;margin-left: -200px">
<form method="post">
  <div class="form-group">
    <label for="auth_code">请输入项目"{$project['title']}"授权码</label>
    <input type="text" class="form-control" name="auth_code" id="auth_code" value="{$code}" placeholder="请输入" aria-describedby="helpBlock">
    <span id="helpBlock" style="color: red" class="help-block">{$show_tip}</span>
  </div>
  <button type="submit" style="width: 100%" class="btn btn-primary">提交</button>
</form>
</div>

</div>

</body>
</html>
info;

        exit($data);
    }
}
